#!/usr/bin/env python3

import argparse
import os
import sys

import arrow

HERE = os.path.dirname(os.path.realpath(__file__))
ROOT = os.path.dirname(HERE)
sys.path.insert(0, ROOT)

from lib import config, jinjaenv
from lib.db import Status, filter_statuses, parse_and_save_all_existing_statuses
from lib.jinjaenv import JINJAENV
from lib.logger import logger

def generate_page(template, path, **kwargs):
    logger.info(f'generating {path}')
    if isinstance(template, str):
        template = JINJAENV.get_template(template)
    path = os.path.join(config.builddir, path)
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'w') as fp:
        fp.write(template.render(**kwargs))

def generate_index():
    os.makedirs(config.builddir, exist_ok=True)
    os.symlink('1.html', os.path.join(config.builddir, 'index.html'))

def generate_all(statuses):
    with jinjaenv.setglobal('LAZYLOAD', True):
        generate_page('all.html', 'all.html', statuses=statuses)

def generate_paginated(statuses):
    total = len(statuses)
    per_page = config.statuses_per_page
    page_count = (total - 1) // per_page + 1
    for page in range(1, page_count + 1):
        generate_page('paginated.html', f'{page}.html',
                      page=page,
                      total_pages=page_count,
                      statuses=statuses[per_page*(page-1):per_page*page])

def generate_gallery(statuses):
    images = [(
        arrow.get(status.created_at).to('Asia/Shanghai').strftime('%Y-%m-%d'),
        status.url,
        image,
    ) for status in statuses for image in status.images.split()]
    with jinjaenv.setglobal('LAZYLOAD', True):
        generate_page('gallery.html', 'gallery.html', images=images)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--parse', action='store_true',
                        help='parse saved statuses on disk and (re-)populate database')
    args = parser.parse_args()

    if args.parse:
        parse_and_save_all_existing_statuses()

    statuses = filter_statuses(Status.select().order_by(Status.created_at.desc()))
    logger.info(f'generating site in {config.builddir}')
    generate_index()
    generate_all(statuses)
    generate_paginated(statuses)
    generate_gallery(statuses)

if __name__ == '__main__':
    main()
